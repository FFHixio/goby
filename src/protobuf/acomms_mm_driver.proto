import "goby/protobuf/acomms_driver_base.proto";
import "goby/protobuf/acomms_modem_message.proto";


// TODO(tes) rework ModemInitiateTransmission to not use AMAC slot
import "goby/protobuf/acomms_amac.proto"; // temporary for ModemInitiateTransmission

message MicroModemConfig
{
  extend goby.acomms.protobuf.DriverConfig 
  {
    // reset all NVRAM settings to factory before
    // setting ours ($CCCFG,ALL,0)
    optional bool reset_nvram = 1000 [default = false]; 
    
    // add NVRAM configuration sentences to send to the modem
    // on startup (e.g. "$CACFG,SRC,1"). Omit the "$CACFG," here.
    // To reinitialize all values to factory settings, send "ALL,0"
    repeated string nvram_cfg = 1001; // e.g. "SRC,3"
    
    // set to a non-zero value to indicate that we are using the hydroid gateway
    // buoy which has a non-standard sentence structure (#M / !M prefixes)
    // *do not set for the normal WHOI Micro-Modem*
    optional uint32 hydroid_gateway_id = 1002 [default = 0]; 

    
    // for REMUS_LBL_RANGING
    // LSB->MSB is LBL beacons 1,2,3,... true is enabled, false is disabled
    // enable four beacons is b1111 == d15 
    optional uint32 remus_enable_beacons = 1003 [default = 15];
    optional uint32 remus_turnaround_ms = 1004 [default = 50];

    // for NARROWBAND_LBL_RANGING
    optional uint32 narrowband_transmit_freq = 1005; // in hertz
    optional uint32 narrowband_transmit_ping_ms = 1006; // length of tx ping
    repeated uint32 narrowband_receive_freq = 1007; // in hertz, first element (0) == beacon A, etc.
    optional uint32 narrowband_receive_ping_ms = 1008; // length of rx ping
    
    optional uint32 narrowband_turnaround_ms = 1009;
    optional bool narrowband_transmit_flag = 1010 [default = true]; //Flag to indicate whether the transmit signal is actually sent (1), or whether the ping is initiated with an external synchronization pulse (0).

    
  }
}

message MicroModem
{
  enum PacketType
  {
    PACKET_DATA = 1; // CARXD
    PACKET_MINI = 2; // CAMUA
  }
  extend goby.acomms.protobuf.ModemDataTransmission
  {
    optional PacketType packet_type = 1000;
  }

  extend goby.acomms.protobuf.ModemDataInit
  {
    optional goby.acomms.protobuf.Slot init_slot = 1000; // from amac: TODO(tes): rework to make generic
  }

  extend goby.acomms.protobuf.ModemDataRequest
  {
    optional goby.acomms.protobuf.Slot request_slot = 1000; // from amac: TODO(tes): rework to make generic
  }
  
}

