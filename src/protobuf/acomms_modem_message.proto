package goby.acomms.protobuf;


message ModemTransmission
{
  optional int32 src = 1 [default = -1]; //  0 (BROADCAST), 1-31, 
  optional int32 dest = 2 [default = -1]; //  0 (BROADCAST), 1-31, -1 (QUERY_DESTINATION_ID)
  optional uint64 time = 3; // microseconds since UNIX (1970-01-01 00:00:00 UTC)
  enum TimeSource { MODEM_TIME = 1; GOBY_TIME = 2; } 
  optional TimeSource time_source = 5 [default = GOBY_TIME]; // source of the timestamp given  
  optional int32 rate = 6 [default = 0]; // 0 (lowest) - 5 (highest), -1 (QUERY_RATE)
 
  enum TransmissionType
  {
    // General (DriverBase) types
    UNKNOWN = 0;
    DATA = 1;
    ACK = 2;

    // 1000-1099 taken by MMDriver - fields used by these types are given as MicroModem Extensions
    // see acomms_mm_driver.proto
    MICROMODEM_TWO_WAY_PING = 1000;   // modem 1 interrogates modem 2; modem 2 replies and modem 1 computes one way travel time: $CCMPC
    MICROMODEM_REMUS_LBL_RANGING = 1001;     // modem 1 pings a REMUS network of long baseline (LBL) beacons: $CCPDT
    MICROMODEM_NARROWBAND_LBL_RANGING = 1002;    // modem 1 pings up to four transponders: $CCPNT
    MICROMODEM_MINI_DATA = 1003; // 13 bits (represented as a 1 frame, 2 byte data transmission where data is AND'd with 0x1ff) mini data transmission
  }

  optional TransmissionType type = 7 [default = UNKNOWN];
  
  // for type == DATA
  optional uint32 max_num_frames = 11 [default = 1]; // set by the modem driver for the given rate
  optional uint32 max_frame_bytes = 12; // set by the modem driver for the given rate, omitted means no maximum
  optional bool ack_requested = 13 [default = true]; // acoustic acknowledgment requested
  repeated bytes frame = 14; // if omitted, you will be queried for data on signal_data_request. You can also set some frames here and the rest will be filled by signalling a data request

  // for type == ACK
  repeated int32 acked_frame = 20;
  
  // 1000-1099 taken by MMDriver
  // 1100-1199 taken by MACManager
  extensions 1000 to max;
}

// for type == DATA transmissions
//message ModemDataTransmission
//{
  // optional int32 src = 1 [default = 0]; //  0 (BROADCAST), 1-31 
  // optional int32 dest = 2 [default = 0]; //  0 (BROADCAST), 1-31
  //  optional uint64 time = 3; // microseconds since UNIX (1970-01-01 00:00:00 UTC)
  // optional bytes data = 10;
  //  optional uint32 frame_number = 12 [default = 0];  // frame number if the modem supports multiple frames per packet
  
  // 1000-1099 taken by MMDriver
  //extensions 1000 to max;
  //}

message ModemRaw
{
  required string raw = 7; // "$CARXD,..."
  optional string description = 8; // "Incoming hexadecimal data"
}
