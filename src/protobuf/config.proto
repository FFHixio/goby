import "goby/protobuf/option_extensions.proto";
import "goby/protobuf/app_base_config.proto";

package goby.core.proto;

// Type of vehicle for a given node
enum VehicleType { AUV = 1;
                   USV = 2;
                   SHIP = 3;
                   GLIDER = 4;
                   TARGET = 5;
                   BUOY = 6;
                   OTHER = 7; }

// defines information and connections
// to a node (vehicle, ship, etc.)
// a node is defined by a single gobyd and collection
// of connected processes
message Platform
{
  message SerialInfo
  {
    required string port = 1 [(example)="/dev/ttyUSB1"];
    required uint32 baud = 2 [(example)="19200"];
  }
  message AcousticModemInfo
  {
    required uint32 mm_id = 1 [(description)="Micro-Modem id ($CCCFQ,SRC)",
                               (example)="1"];
    required SerialInfo mm_serial = 2;
    optional bool has_coproc = 3 [default=true,
                                  (description)="can handle high-rate PSK"];
  }
  message EthernetInfo
  {
    required string ipv4_addr = 1 [(example)="192.168.1.1"];
    required uint32 ipv4_port = 2 [(example)="10023"];
  }
    
  required string name = 1 [(description)="unique name of the node",
                            (example)="AUV-23"];
  optional VehicleType type = 2 [(description)="type of the node", default=AUV];

  optional AcousticModemInfo acomms = 3 [(description)="acoustic connectivity"];
  optional EthernetInfo ether = 4 [(description)="ethernet connectivity"];
  optional SerialInfo serial = 5 [(description)="serial connectivity "];
}

message LogConfig
{
  enum SQLBackend
  {
    SQLITE = 1;
  }
  optional SQLBackend backend = 1 [default=SQLITE];
    
  message SQLiteInfo
  {       
    // %1% gets expanded into platform name
    // %2% gets expanded to iso date-time stamp
    optional string path = 2 [default="./%1%_%2%_goby.db"];
  }
  // only needed if backend == SQLITE
  optional SQLiteInfo sqlite = 2;
}

// latitude and longitude can be troublesome to use, so often
// we want to define a local datum for doing a planar approximation
// in X,Y,Z coordinates (meters) of where vehicles are.
// This datum is the 0,0,0 point of the X,Y,Z grid
message LocalCartesianDatum
{
  required double lat = 1; // decimal degrees
  required double lon = 2; // decimal degrees
  optional double depth = 3 [default=0]; // meters
}

message Config
{
  optional AppBaseConfig base = 1 [(description)="params shared with all goby applications"];
  optional Platform self = 2 [(description)="this platform"];
  repeated Platform other = 3 [(description)="the known world of platforms"];
  optional LogConfig log = 4 [(description)="SQL log configuration"];

  optional LocalCartesianDatum origin = 5 [(description)="Convenient origin for local cartesian coordinate transformations"];
}

