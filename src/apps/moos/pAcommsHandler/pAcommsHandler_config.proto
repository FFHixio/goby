import "goby/moos/tes_moos_app.proto";
import "goby/common/acomms_driver_base.proto";
import "goby/common/acomms_queue.proto";
import "goby/common/acomms_amac.proto";
import "goby/common/acomms_dccl.proto";
import "goby/common/acomms_modem_message.proto";
import "goby/common/moos_transitional.proto";
import "goby/common/option_extensions.proto";


message pAcommsHandlerConfig
{
  optional TesMoosAppConfig common = 1 [(goby.field).description="Configuration common to all Goby MOOS applications"]; // see tes_moos_app.proto

  // unique identifying integer (1-31) for this vehicle's modem
  // setting this will set the modem_id for all the components of goby-acomms
  required int32 modem_id = 2 [(goby.field).description="Unique number 1-31 to identify this node", (goby.field).example="1"];

  // driver
  enum DriverType { DRIVER_NONE = 1; DRIVER_WHOI_MICROMODEM = 2; DRIVER_ABC_EXAMPLE_MODEM = 3;}
  optional DriverType driver_type = 3 [default = DRIVER_NONE, (goby.field).description="Corresponding driver for the type of physical acoustic modem used"];
  optional goby.acomms.protobuf.DriverConfig driver_cfg = 4 [(goby.field).description="Configure the acoustic modem driver"]; // see acomms_driver_base.proto & acomms_mm_driver.proto

  // amac
  optional goby.acomms.protobuf.MACConfig mac_cfg = 5 [(goby.field).description="Configure the acoustic Medium Access Control"]; // see acomms_amac.proto
  
  // for queue
  optional goby.acomms.protobuf.QueueManagerConfig queue_cfg = 6 [(goby.field).description="Configure the Priority Queuing layer"]; // see acomms_queue.proto

  // for dccl
  optional goby.acomms.protobuf.DCCLConfig dccl_cfg = 7 [(goby.field).description="Configure the Dynamic Compact Control Language Encoding/Decoding unit"];  // see acomms_dccl.proto


  repeated string load_shared_library = 20 [(goby.field).description="Path to a shared library containing compiled DCCL protobuf files. Preferred over load_dccl_proto_file."];

  repeated string load_dccl_proto_file = 21 [(goby.field).description="Path to a DCCL protobuf file. Use load_shared_library when possible."];

  
  // how to make a message
  message MOOSProtobufTranslator
  {
    required string protobuf_name = 1 [(goby.field).description="Fully qualified name (including package, if any) of a DCCL protobuf message to tag this parser to."];    
    
    message Trigger
    {
      enum Type 
      {
        TRIGGER_PUBLISH = 1;
        TRIGGER_TIME = 2;
      }
      optional Type type = 1 [default = TRIGGER_PUBLISH];
      optional string moos_var = 2;
      optional uint32 time = 3;

    }
    optional Trigger trigger = 2;



    enum ParserSerializerTechnique
    {
      TECHNIQUE_PROTOBUF_TEXT_FORMAT = 1;
      TECHNIQUE_PROTOBUF_NATIVE_ENCODED = 2;
      TECHNIQUE_COMMA_SEPARATED_KEY_EQUALS_VALUE_PAIRS = 3;
      TECHNIQUE_FORMAT = 4;
    }

    message Algorithm
    {
      required string name = 1;
      required string primary_field = 2;
      repeated string reference_field = 3;
    }
    
    message CreateParser
    {
      optional ParserSerializerTechnique technique = 1 [default = TECHNIQUE_PROTOBUF_TEXT_FORMAT];
      required string moos_var = 2;
      optional string format = 3;

      repeated Algorithm algorithm = 4;
    }

    repeated CreateParser create = 3;

    message PublishSerializer
    {
      optional ParserSerializerTechnique technique = 1 [default = TECHNIQUE_PROTOBUF_TEXT_FORMAT];
      required string moos_var = 2;
      optional string format = 3;
      
      repeated Algorithm algorithm = 4;
    }
    repeated PublishSerializer publish = 4;
  }
  
  repeated MOOSProtobufTranslator moos_dccl_translator = 22 [(goby.field).description="Describes how to trigger (generate) a DCCL message from a MOOS event and how to publish the contents of the message upon receipt"];
  
  // path to text file with entries:
  //   modem_id,name,type
  // for example
  //   3,unicorn,auv
  optional string modem_id_lookup_path = 101 [(goby.field).description="Path to file containing mapping between modem_id and vehicle name & type",(goby.field).moos_global = "modem_id_lookup_path"];

  optional goby.transitional.protobuf.DCCLTransitionalConfig transitional_cfg = 200 [(goby.field).description="Backwards compatibility for DCCLv1 XML file"]; // see transitional.proto

}
