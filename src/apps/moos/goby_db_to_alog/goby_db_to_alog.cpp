// copyright 2011 t. schneider tes@mit.edu
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this software.  If not, see <http://www.gnu.org/licenses/>.

#include <iostream>
#include <fstream>

#include "goby/moos/libmoos_util/moos_dbo_helper.h"
#include "goby/moos/libmoos_util/moos_node.h"
#include "goby/core/libcore/application_base.h"

#include "MOOSGenLib/MOOSGenLibGlobalHelper.h"

#include "goby_db_to_alog_config.pb.h"

using goby::moos::operator<<;

// copied from the guts of pLogger
// pLogger isn't given as a library so we don't have much choice
class SpoofLogger
{
public:
    bool DoBanner(std::ostream & os,const std::string & sFileName, const std::string& orig_file_name)
        {
            using namespace std;
            os<<"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n";
            os<<"%% LOG FILE:       "<<sFileName.c_str()<< " (generated by goby_db_to_alog from " << orig_file_name << ")" << endl;
            os<<"%% FILE OPENED ON  "<<MOOSGetDate().c_str();
            os<<"%% LOGSTART        "<<setw(20)<<setprecision(12)<<GetAppStartTime()<<endl;
            os<<"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n";
            
            return true;
        }

    // from CMOOSLogger::DoAsyncLog
    void write_entry(std::ostream & os, CMOOSMsg& rMsg)
        {
            using namespace std;            				
            os.setf(ios::left);
            os.setf(ios::fixed);
            os<<setw(15)<<setprecision(3)<<rMsg.GetTime()-GetAppStartTime()<<' ';
            os<<setw(20)<<rMsg.GetKey().c_str()<<' ';
            os<<setw(15)<<rMsg.GetSource().c_str()<<' ';
            os<<rMsg.GetAsString(12,DEFAULT_DOUBLE_PRECISION).c_str()<<' ';
            os<<endl;
        }
    

    double GetAppStartTime()
        {
            return start_time_;
        }

    void set_start_time(double t) 
        { start_time_ = t; }
    
private:
    enum { DEFAULT_DOUBLE_PRECISION = 5 };
    
    double start_time_;
    

};


class GobyDbToAlog : public goby::core::ApplicationBase
{
public:
    GobyDbToAlog()
        : ApplicationBase(&cfg_)
        {
            std::ofstream moos_alog_ofstream;
            std::ostream* moos_alog_file;
            if(cfg_.has_moos_alog())
            {
                moos_alog_ofstream.open(cfg_.moos_alog().c_str());
                if(!moos_alog_ofstream.is_open())
                    throw(std::runtime_error("Could not open " + cfg_.moos_alog() + " for writing"));
                moos_alog_file = &moos_alog_ofstream;
            }
            else
            {
                moos_alog_file = &std::cout;
            }
            
            Wt::Dbo::backend::Sqlite3 connection(cfg_.goby_log());
            Wt::Dbo::Session session;
            session.setConnection(connection);
            session.mapClass<CMOOSMsg>("CMOOSMsg");
    
            Wt::Dbo::Transaction transaction(session);
            typedef Wt::Dbo::collection< Wt::Dbo::ptr<CMOOSMsg> > Msgs;
    
            Msgs msgs;

            if(cfg_.has_where())
                msgs = session.find<CMOOSMsg>("where "  + cfg_.where() + " order by moosmsg_time ASC");
            else
                msgs = session.find<CMOOSMsg>("order by moosmsg_time ASC");
            
            
            goby::glog << "We have " << msgs.size() << " messages:" << std::endl;

            SpoofLogger spoof_logger;

            int i = 0;
            for (Msgs::const_iterator it = msgs.begin(), n = msgs.end(); it != n; ++it)
            {
                CMOOSMsg msg(*(*it));
                if(i == 0)
                {
                    spoof_logger.set_start_time(msg.GetTime());
                    spoof_logger.DoBanner(*moos_alog_file, cfg_.moos_alog(), cfg_.goby_log());
                }

                spoof_logger.write_entry(*moos_alog_file, msg);
                ++i;
            }


            if(moos_alog_ofstream.is_open())
                moos_alog_ofstream.close();

            quit();

        }

private:
    void iterate() { assert(false); }

private:
    static GobyDbToAlogConfig cfg_;
    
};

GobyDbToAlogConfig GobyDbToAlog::cfg_;

int main(int argc, char* argv[])
{
    return goby::run<GobyDbToAlog>(argc, argv);
}
