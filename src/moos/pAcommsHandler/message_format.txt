whoi micromodem packets are either 32, 64 or 256 byte hex sentences
this process uses that sentence in the following manner:

[ccl identifier (1 byte)][multimessage flag set to 0 (1 bit)][broadcast flag (true / false) (1 bit)][dccl message id (6 bits)][message hex (30, 62 or 254 bytes)]
[ccl identifier (1 byte)][multimessage flag set to 1 (1 bit)][broadcast flag (true / false) (1 bit)][dccl message id (6 bits)][user-frame counter (8 bits)][message hex for first user frame] ... [multimessage flag set to 0 (1 bit)][broadcast flag (true / false) (1 bit)][dccl message id (6 bits)][message hex for last user-frame]

ccl identifier - we use 0x20
multimessage flag - 0 means last user-frame within message, 1 means more user-frames follow within this modem frame
broadcast flag - 0 means message is NOT broadcast (respect the destination in the message meta-data). 1 means the message is broadcast (decode regardless of who you are)
user frame counter - if type flag is 1, the byte indicates the size of the following data (in bytes).
message moos variable id - user set value 0-63 that allows mapping of moos variable names from the receive and send ends
message hex - the message body



// OLD FORMAT - pre 7.14.09
whoi micromodem packets are either 32, 64 or 256 byte hex sentences
this process uses that sentence in the following manner:

[ccl identifier (1 byte)][dccl message id (8 bits)][message hex (30, 62 or 254 bytes)]

ccl identifier - we use 0x20
message moos variable id - user set value 0-255 that allows mapping of moos variable names from the receive and send ends
message hex - the message body



// OLD FORMAT - pre 3.16.09 
// what follows is for history purposes only!
whoi micromodem packets are either 32 byte or 64 byte hex sentences
this process uses that sentence in the following manner:

[ccl identifier (1 byte)][message number, unimplemented (2 bits)][message encoding, unimplemented (2 bits)][message moos variable id (4 bits)][message hex (30, 62 or 254 bytes)]

ccl identifier - we use 0x20
message number - will allow multipart messages (up to 4 parts) to be sent
message encoding - encoding scheme for message hex:
        0 - hex (do not encode / decode)
        1 - ascii
        2 - 41 char limited alphabet (implements lowercase alphabet, numbers, and '=' ',' '.' '_' '-')
        3 - doubles?
message moos variable id - user set value 0-15 that allows mapping of moos variable names from the receive and send ends
message hex - the message body
