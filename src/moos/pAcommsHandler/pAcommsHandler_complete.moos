ProcessConfig = pAcommsHandler
{
  common {  # Configuration common to all Goby MOOS applications 
            # (opt)
    log: true  # Should we write a text log of the terminal 
               # output? (opt) (default=true) (can also set MOOS 
               # global "log=")
    log_path: "./"  # Directory path to write the text log of the 
                    # terminal output (if log=true) (opt) 
                    # (default="./") (can also set MOOS global 
                    # "log_path=")
    community: "AUV23"  # The vehicle's name (opt) (can also set 
                        # MOOS global "Community=")
    lat_origin: 42.5  # Latitude in decimal degrees of the local 
                      # cartesian datum (opt) (can also set MOOS 
                      # global "LatOrigin=")
    lon_origin: 10.9  # Longitude in decimal degrees of the local 
                      # cartesian datum (opt) (can also set MOOS 
                      # global "LongOrigin=")
    app_tick: 10  # Frequency at which to run Iterate(). (opt) 
                  # (default=10)
    comm_tick: 10  # Frequency at which to call into the MOOSDB 
                   # for mail. (opt) (default=10)
    verbosity: VERBOSITY_VERBOSE  # Verbosity of the terminal 
                                  # window output (VERBOSITY_QUIET, 
                                  # VERBOSITY_WARN, 
                                  # VERBOSITY_VERBOSE, 
                                  # VERBOSITY_DEBUG, VERBOSITY_GUI) 
                                  # (opt) 
                                  # (default=VERBOSITY_VERBOSE)
    initializer {  # Publish a constant value to the MOOSDB at 
                   # startup (repeat)
      type: INI_DOUBLE  # type of MOOS variable to publish 
                        # (INI_DOUBLE, INI_STRING) (req)
      moos_var: "SOME_MOOS_VAR"  # name of MOOS variable to 
                                 # publish to (req)
      global_cfg_var: "LatOrigin"  # Optionally, instead of 
                                   # giving `sval` or `dval`, give 
                                   # a name here of a global MOOS 
                                   # variable (one at the top of 
                                   # the file) whose contents 
                                   # should be written to 
                                   # `moos_var` (opt)
      dval: 3.454  # Value to write for type==INI_DOUBLE (opt)
      sval: "a string"  # Value to write for type==INI_STRING 
                        # (opt)
    }
  }
  modem_id: 1  # Unique number 1-31 to identify this node (req)
  driver_type: DRIVER_NONE  # Corresponding driver for the type 
                            # of physical acoustic modem used 
                            # (DRIVER_NONE, DRIVER_WHOI_MICROMODEM, 
                            # DRIVER_ABC_EXAMPLE_MODEM) (opt) 
                            # (default=DRIVER_NONE)
  driver_cfg {  # Configure the acoustic modem driver (opt)
    modem_id: 1  # Unique number 1-31 to identify this node (req)
    connection_type: CONNECTION_SERIAL  # Physical connection 
                                        # type from this computer 
                                        # (running Goby) to the 
                                        # acoustic modem 
                                        # (CONNECTION_SERIAL, 
                                        # CONNECTION_TCP_AS_CLIENT, 
                                        # CONNECTION_TCP_AS_SERVER, 
                                        # CONNECTION_DUAL_UDP_BROADC
                                        # AST) (opt) 
                                        # (default=CONNECTION_SERIAL
                                        # )
    line_delimiter: "\r\n"  # String used to delimit new lines 
                            # for this acoustic modem (opt) 
                            # (default="\r\n")
    serial_port: "/dev/ttyS0"  # Serial port for 
                               # CONNECTION_SERIAL (opt)
    serial_baud: 19200  # Baud rate for CONNECTION_SERIAL (opt)
    tcp_server: "192.168.1.111"  # IP Address or domain name for 
                                 # the server if 
                                 # CONNECTION_TCP_AS_CLIENT (opt)
    tcp_port: 50010  # Port to serve on (for 
                     # CONNECTION_TCP_AS_SERVER) or to connect to 
                     # (for CONNECTION_TCP_AS_CLIENT) (opt)
  }
  mac_cfg {  # Configure the acoustic Medium Access Control (opt)
    modem_id: 1  # Unique number 1-31 to identify this node (req)
    type: MAC_NONE  # The type of TDMA MAC scheme to use 
                    # (MAC_NONE, MAC_FIXED_DECENTRALIZED, 
                    # MAC_AUTO_DECENTRALIZED, MAC_POLLED) (opt) 
                    # (default=MAC_NONE)
    slot {  # Configure a slot in the communications cycle. Slots 
            # are run in the order they are declared. Omit for 
            # MAC_AUTO_DECENTRALIZED. (repeat)
      src: 1  # source modem id for this transmission (initiating 
              # platform) (req)
      dest: -1  # destination modem id for this transmission; 0 
                # means broadcast, -1 means query the queuing layer 
                # for next available message (opt) (default=-1)
      rate: 0  # bit rate (integer from 0-5, 0 is slowest) (opt) 
               # (default=0)
      type: SLOT_DATA  # type of message to initiate in this slot 
                       # (SLOT_DATA, SLOT_PING, SLOT_REMUS_LBL) 
                       # (req) (default=SLOT_DATA)
      slot_seconds: 15  # length of this slot in seconds (opt)
      last_heard_time: ""  # used internally, no need to 
                           # configure manually (opt)
    }
    rate: 0  # Set rate to use for MAC_AUTO_DECENTALIZED. Use 
             # `slot` for other MACTypes (opt) (default=0)
    slot_seconds: 15  # Set duration of the slot for 
                      # MAC_AUTO_DECENTRALIZED. Use `slot` for 
                      # other MACTypes (opt) (default=15)
    expire_cycles: 30  # Set number of quiet cycles for 
                       # discarding a node from the cycle for 
                       # MAC_AUTO_DECENTRALIZED. (opt) (default=30)
  }
  queue_cfg {  # Configure the Priority Queuing layer (opt)
    modem_id: 1  # Unique number 1-31 to identify this node (req)
    message_file {  # XML message file containing one or more 
                    # DCCL message descriptions. Use for specifying 
                    # DCCL queues. (repeat)
      path: "/home/toby/goby/src/acomms/examples/chat/chat.xml"  
                                              # path to the 
                                              # message XML file 
                                              # (req)
      manipulator: NO_MANIP  # manipulators to modify the 
                             # encoding and queuing behavior of the 
                             # messages in this file (NO_MANIP, 
                             # NO_ENCODE, NO_DECODE, NO_QUEUE, 
                             # LOOPBACK, ON_DEMAND, TCP_SHARE_IN) 
                             # (repeat)
    }
    queue {  # Use for specifying CCL queues; use message_file 
             # for DCCL queues. (repeat)
      ack: true  # Require acoustic acknowledgments of messages 
                 # sent from this queue (opt) (default=true)
      blackout_time: 0  # Time in seconds to ignore this queue 
                        # after the last send from it. (opt) 
                        # (default=0)
      max_queue: 0  # Maximum allowed messages in this queue (0 
                    # means infinity). (opt) (default=0)
      newest_first: true  # true = FILO queue, false = FIFO queue 
                          # (opt) (default=true)
      value_base: 1  # Base value (general importance) of the 
                     # messages in this queue (opt) (default=1)
      ttl: 1800  # Time to live in seconds; messages exceeding 
                 # this time are discarded. Also factors into 
                 # priority equation (opt) (default=1800)
      key {  #  (opt)
        type: QUEUE_DCCL  # Type of messages in this queue 
                          # (QUEUE_DCCL, QUEUE_CCL) (req) 
                          # (default=QUEUE_DCCL)
        id: 14  # DCCL ID for QUEUE_DCCL, CCL Identifier (first) 
                # byte for QUEUE_CCL (req)
      }
      name: "Remus_State"  # Human readable name for this queue 
                           # (req)
      in_pubsub_var: "REMUS_STATE_RAW_IN"  # Publish subscribe 
                                           # architecture variable 
                                           # for posting incoming 
                                           # data to (opt)
      out_pubsub_var: "REMUS_STATE_RAW_OUT"  # Publish subscribe 
                                             # architecture 
                                             # variable for 
                                             # fetching outgoing 
                                             # data from (opt)
    }
  }
  dccl_cfg {  # Configure the Dynamic Compact Control Language 
              # Encoding/Decoding unit (opt)
    modem_id: 1  # Unique number 1-31 to identify this node (req)
    message_file {  # XML message file containing one or more 
                    # DCCL message descriptions (repeat)
      path: "/home/toby/goby/src/acomms/examples/chat/chat.xml"  
                                              # path to the 
                                              # message XML file 
                                              # (req)
      manipulator: NO_MANIP  # manipulators to modify the 
                             # encoding and queuing behavior of the 
                             # messages in this file (NO_MANIP, 
                             # NO_ENCODE, NO_DECODE, NO_QUEUE, 
                             # LOOPBACK, ON_DEMAND, TCP_SHARE_IN) 
                             # (repeat)
    }
    crypto_passphrase: "twinkletoes%24"  # If given, encrypt all 
                                         # communications with this 
                                         # passphrase using AES. 
                                         # Omit for unencrypted 
                                         # communications. (opt)
  }
  modem_id_lookup_path: ""  # Path to file containing mapping 
                            # between modem_id and vehicle name & 
                            # type (opt) (can also set MOOS global 
                            # "modem_id_lookup_path=")
  tcp_share_enable: false  # Enable TCP Sharing (Experimental) 
                           # (opt) (default=false)
  tcp_share_port: 11000  # Port to listen on for TCP Sharing 
                         # (Experimental) (opt) (default=11000)
  tcp_share_to_ip: ""  # internet_address:port to share incoming 
                       # messages to (Experimental). (repeat)
}
