ProcessConfig = pAcommsHandler
{
  common {  # Configuration common to all Goby MOOS applications 
            # (optional)
  }
  modem_id: 1  # Unique number 1-31 to identify this node 
               # (required)
  driver_type: DRIVER_NONE  # Corresponding driver for the type 
                            # of physical acoustic modem used 
                            # (DRIVER_NONE, DRIVER_WHOI_MICROMODEM, 
                            # DRIVER_ABC_EXAMPLE_MODEM, 
                            # DRIVER_UFIELD_SIM_DRIVER, 
                            # DRIVER_PB_STORE_SERVER, DRIVER_UDP) 
                            # (optional) (default=DRIVER_NONE)
  driver_cfg {  # Configure the acoustic modem driver (optional)
  }

  mac_cfg {  # Configure the acoustic Medium Access Control 
             # (optional)
  }

  queue_cfg {  # Configure the Priority Queuing layer (optional)

  }
  dccl_cfg {  # Configure the Dynamic Compact Control Language 
              # Encoding/Decoding unit (optional)
  }

  route_cfg {  # Configure the Goby Routing unit (optional)
    route {  #  (optional)
      hop:   #  (repeated)
    }
    subnet_mask: 4294967040  #  (optional) (default=4294967040)
  }
  moos_var {  #  (optional)
    prefix: "ACOMMS_"  # Prefix all MOOS variable names with this 
                       # string (optional) (default="ACOMMS_")
    driver_raw_in: "NMEA_IN"  #  (optional) (default="NMEA_IN")
    driver_raw_out: "NMEA_OUT"  #  (optional) (default="NMEA_OUT")
    driver_raw_msg_in: "RAW_INCOMING"  #  (optional) 
                                       # (default="RAW_INCOMING")
    driver_raw_msg_out: "RAW_OUTGOING"  #  (optional) 
                                        # (default="RAW_OUTGOING")
    driver_receive: "MODEM_RECEIVE"  #  (optional) 
                                     # (default="MODEM_RECEIVE")
    driver_transmit: "MODEM_TRANSMIT"  #  (optional) 
                                       # (default="MODEM_TRANSMIT")
    queue_receive: "QUEUE_RECEIVE"  #  (optional) 
                                    # (default="QUEUE_RECEIVE")
    queue_transmit: "QUEUE_TRANSMIT"  #  (optional) 
                                      # (default="QUEUE_TRANSMIT")
    queue_ack_transmission: "ACK"  #  (optional) (default="ACK")
    queue_ack_original_msg: "ACK_ORIGINAL"  #  (optional) 
                                            # (default="ACK_ORIGINAL
                                            # ")
    queue_expire: "EXPIRE"  #  (optional) (default="EXPIRE")
    queue_size: "QSIZE"  #  (optional) (default="QSIZE")
    queue_flush: "FLUSH_QUEUE"  #  (optional) 
                                # (default="FLUSH_QUEUE")
    mac_cycle_update: "MAC_CYCLE_UPDATE"  #  (optional) 
                                          # (default="MAC_CYCLE_UPDA
                                          # TE")
    mac_initiate_transmission: "MAC_INITIATE_TRANSMISSION"  
                                              #  (optional) 
                                              # (default="MAC_INITIA
                                              # TE_TRANSMISSION")
  }
  load_shared_library: "/usr/lib/libmy_dccl_messages.so"  
                                              # Path to a shared 
                                              # library containing 
                                              # compiled DCCL 
                                              # protobuf files. 
                                              # Preferred over 
                                              # load_dccl_proto_file
                                              # . (repeated)
  load_proto_file: "/usr/include/mylib/message.proto"  
                                              # Path to a DCCL 
                                              # protobuf file. Use 
                                              # load_shared_library 
                                              # when possible. 
                                              # (repeated)
  translator_entry {  # Describes how to trigger (generate) a 
                      # DCCL message from a MOOS event and how to 
                      # publish the contents of the message upon 
                      # receipt (repeated)
    protobuf_name: ""  # Fully qualified name (including package, 
                       # if any) of a DCCL protobuf message to tag 
                       # this parser to. (required)
    trigger {  #  (optional)
      type: TRIGGER_PUBLISH  #  (TRIGGER_PUBLISH, TRIGGER_TIME) 
                             # (optional) (default=TRIGGER_PUBLISH)
      moos_var: ""  #  (optional)
      period:   #  (optional)
      mandatory_content: ""  #  (optional)
    }
    create {  #  (repeated)
      technique: TECHNIQUE_PROTOBUF_TEXT_FORMAT  
                                              #  
                                              # (TECHNIQUE_PROTOBUF_
                                              # TEXT_FORMAT, 
                                              # TECHNIQUE_PROTOBUF_N
                                              # ATIVE_ENCODED, 
                                              # TECHNIQUE_COMMA_SEPA
                                              # RATED_KEY_EQUALS_VAL
                                              # UE_PAIRS, 
                                              # TECHNIQUE_FORMAT, 
                                              # TECHNIQUE_PREFIXED_P
                                              # ROTOBUF_TEXT_FORMAT)
                                              #  (optional) 
                                              # (default=TECHNIQUE_P
                                              # ROTOBUF_TEXT_FORMAT)
      moos_var: ""  #  (required)
      format: ""  #  (optional)
      repeated_delimiter: ","  #  (optional) (default=",")
      algorithm {  #  (repeated)
        name: ""  #  (required)
        primary_field:   #  (required)
      }
    }
    publish {  #  (repeated)
      technique: TECHNIQUE_PROTOBUF_TEXT_FORMAT  
                                              #  
                                              # (TECHNIQUE_PROTOBUF_
                                              # TEXT_FORMAT, 
                                              # TECHNIQUE_PROTOBUF_N
                                              # ATIVE_ENCODED, 
                                              # TECHNIQUE_COMMA_SEPA
                                              # RATED_KEY_EQUALS_VAL
                                              # UE_PAIRS, 
                                              # TECHNIQUE_FORMAT, 
                                              # TECHNIQUE_PREFIXED_P
                                              # ROTOBUF_TEXT_FORMAT)
                                              #  (optional) 
                                              # (default=TECHNIQUE_P
                                              # ROTOBUF_TEXT_FORMAT)
      moos_var: ""  #  (required)
      format: ""  #  (optional)
      repeated_delimiter: ","  #  (optional) (default=",")
      algorithm {  #  (repeated)
        name: ""  #  (required)
        output_virtual_field:   #  (required)
        primary_field:   #  (required)
        reference_field:   #  (repeated)
      }
    }
    use_short_enum: false  #  (optional) (default=false)
  }
  multiplex_create_moos_var: "LIAISON_COMMANDER_OUT"  
                                              # Used primarily by 
                                              # goby_liaison. 
                                              # Specify a MOOS 
                                              # variable that 
                                              # contains one of 
                                              # many 
                                              # TECHNIQUE_PREFIXED_P
                                              # ROTOBUF_TEXT_FORMAT 
                                              # encoded protobuf 
                                              # messages. Upon 
                                              # receipt of a 
                                              # message, the 
                                              # `create` directives 
                                              # for this type are 
                                              # *published* 
                                              # (inverse of normal 
                                              # behavior), which 
                                              # triggers the 
                                              # creation of the 
                                              # message (if 
                                              # `trigger` is set to 
                                              # one of the `create` 
                                              # MOOS variables). 
                                              # (repeated)
  modem_id_lookup_path: ""  # Path to file containing mapping 
                            # between modem_id and vehicle name & 
                            # type (optional) (can also set MOOS 
                            # global "modem_id_lookup_path=")
  transitional_cfg {  # Backwards compatibility for DCCLv1 XML 
                      # file (optional)
    modem_id: 1  # Unique number 1-31 to identify this node 
                 # (optional)
    message_file {  # XML message file containing one or more 
                    # DCCL message descriptions (repeated)
      path: "/home/toby/goby/src/acomms/examples/chat/chat.xml"  
                                              # path to the 
                                              # message XML file 
                                              # (required)
      manipulator: NO_MANIP  # manipulators to modify the 
                             # encoding and queuing behavior of the 
                             # messages in this file (NO_MANIP, 
                             # NO_QUEUE, NO_DEQUEUE, LOOPBACK, 
                             # ON_DEMAND, LOOPBACK_AS_SENT, 
                             # PROMISCUOUS, NO_ENCODE, NO_DECODE) 
                             # (repeated)
    }
    generated_proto_dir: "/tmp"  # Directory to store 
                                 # auto-generated .proto files from 
                                 # deprecated XML files (optional) 
                                 # (default="/tmp")
  }
}
